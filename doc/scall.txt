*scall.txt*	Calls a script local function readily.

Version: 1.0
Author : thinca <thinca+vim@gmail.com>
License: zlib License

==============================================================================
CONTENTS					*scall-contents*

INTRODUCTION			|scall-introduction|
INTERFACE			|scall-interface|
  FUNCTIONS			  |scall-functions|
CUSTOMIZING			|scall-customizing|
CHANGELOG			|scall-changelog|



==============================================================================
INTRODUCTION					*scall-introduction*

*scall* is a Vim plugin to call a script local function readily.
This is useful at the debugging.

Requirements:
- Vim 7.3 or later

Latest version:
https://github.com/thinca/vim-scall



==============================================================================
INTERFACE					*scall-interface*

------------------------------------------------------------------------------
FUNCTIONS					*scall-functions*

scall#call({func-spec} [, {arguments}, ...])	*scall#call()*
	Calls a script local function that specified by {func-spec} with
	{arguments}.
	The function is searched by |scall#search()|.
>
	scall#call('plugin/foo.vim:local_func', 'string', 10)
	-> Calls s:local_func('string', 10) in *plugin/hoge.vim.
<
	{artuments} can be contained in {func-spec}.
>
	scall#call('plugin/hoge:local_func("string", 10)')
	-> Calls s:local_func("string", 10) in *plugin/hoge(.vim)?.
<
	Note the scope of variable.  Function local variable and script local
	variable can not be used.

scall#search({func-spec})			*scall#search()*
	Search a script local function and returns its |Funcref|.  If the
	function is not found, throws an exception that has "scall:" prefix.

	{func-spec} takes the form like "{tail-of-filename}:{func-name}".
>
	scall#search('plugin/foo.vim:local_func')
	-> Returns s:local_func() in *plugin/hoge.vim.
<
	".vim" of filename can be omitable.
>
	scall#search('autoload/foo:local_func')
	-> Returns s:local_func() in *autoload/hoge(.vim)?.
<
	Filename can be omitable.  In this case, current buffer is used.
>
	scall#search('local_func')
	-> Returns s:local_func() in current file.
<
	If {func-spec} is empty, a script local function is searched up
	in the current buffer, and it is used.
>
	scall#search('')
	-> Returns a script local function around the cursor.
<
	If the {tail-of-filename} matches to the two or more scripts, the
	script of the higher position of the list of |:scriptnames| is used.

Scall({func-spec} [, {arguments}, ...])		*Scall()*
	Global function version of |scall#call()| for conveniency.
	This doesn't throw the exception that has "scall:" prefix.  Shows the
	error message instead.
	The name of this function can be changed by |g:scall_function_name|.



==============================================================================
CUSTOMIZING					*scall-customizing*

g:scall_function_name				*g:scall_function_name*
	Changes the name of |Scall()| function.
	You must set the value before this plugin is loaded when you use this.



==============================================================================
CHANGELOG					*scall-changelog*

next
	- Autoloadize.
	- Add |scall#search()|.

1.0	2012-12-01
	- Initial version.


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
